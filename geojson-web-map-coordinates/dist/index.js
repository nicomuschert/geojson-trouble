//# sourceMappingURL=./index.js.map
const{isArray:isArray}=Array,{min:min,max:max,pow:pow,round:round}=Math,MAX=Number.MAX_SAFE_INTEGER,MIN=Number.MIN_SAFE_INTEGER;export default e=>applyWebMapCoordinates(e);export const applyWebMapCoordinates=(e,o=!1)=>{const r=o?unWebMap:toWebMap;if(!("type"in e))return isArray(e[0][0])?isArray(e[0][0][0])?{type:"MultiPolygon",coordinates:e.map(e=>e.map(r))}:{type:isLineType(e)?"MultiLineString":"Polygon",coordinates:e.map(r)}:{type:"LineString",coordinates:r(e)};switch(e.type){case"LineString":e.coordinates=r(e.coordinates);break;case"Polygon":case"MultiLineString":e.coordinates=e.coordinates.map(r);break;case"MultiPolygon":e.coordinates=e.coordinates.map(e=>e.map(r));break;case"GeometryCollection":e.geometries=e.geometries.map(e=>applyWebMapCoordinates(e,o))}return e.bbox&&(e.bbox=bbox(e)),e};const isLineType=e=>(isArray(e[0][0])?e:[e]).reduce((e,o)=>{if(e)return!0;const r=o[0],t=o[o.length-1];return o.length<3||r[0]!==t[0]||r[1]!==t[1]},!1),toWebMap=e=>{const o=e.slice();for(let e=1,r=0;e<o.length;e++){const t=o[e-1][0],i=r+o[e][0],n=declination(i,t);declination(i+360,t)<n&&(r+=360),declination(i-360,t)<n&&(r-=360),0!==r&&(o[e]=[o[e][0]+r,o[e][1]])}return o},unWebMap=e=>e.map(([e,o])=>[e+360*round(e/-360),o]),declination=(e,o)=>e===o?0:pow(e-o,2);export const bbox=e=>{for(e=(e=isArray(e)?e:[e]).map(e=>isArray(e)||"object"!=typeof e?e:positionsFromGeometries([e]));isArray(e[0][0]);)e=e.reduce((e,o)=>[...e,...o],[]);return(isArray(e[0])?e:[e]).reduce(([e,o,r,t],[i,n])=>[min(e,i),min(o,n),max(r,i),max(t,n)],[MAX,MAX,MIN,MIN])};const positionsFromGeometries=e=>e.reduce((e,o)=>{if("geometries"in o)return[...e,...positionsFromGeometries(o.geometries)];const r=bbox(o.coordinates);return[...e,r.splice(0,2),r.splice(0,2)]},[]);